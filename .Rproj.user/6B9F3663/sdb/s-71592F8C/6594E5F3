{
    "contents" : "library(plyr) \nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(scales)\nlibrary(gridExtra)\nlibrary(grid)\nlibrary(reshape2)\n\noptions(tibble.width = NULL)\n\nplays <- read_csv('test.csv', col_names = c('Team', 'Id', 'HomeOrAway', 'Quarter', 'Time', 'Action', 'Score'), col_types = cols(Time = col_character()))\n\nfreeThrows <- plays %>% separate(Score, into = c('AwayScore', 'HomeScore')) %>% separate(Time, into = c(\"Minutes\",\"Seconds\")) %>% \n                        mutate(Minutes = as.numeric(Minutes), Seconds = as.numeric(Seconds), HomeScore = as.numeric(HomeScore), AwayScore = as.numeric(AwayScore)) %>% \n                        mutate(TimeElapsed = 12 -(Minutes + Seconds/60)) %>% filter(grepl('free throw', plays$Action))\n\nmisses <- str_locate(freeThrows$Action, 'misses')[,1]\nmakes <- str_locate(freeThrows$Action, 'makes')[,1]\nmisses[is.na(misses)] = makes[is.na(misses)]\n\nindex = misses - 2\n\nfreeThrows <- freeThrows %>% mutate(Player = substr(Action,1, index), Outcome = substr(Action, index+2, 100)) %>% separate(Outcome, into = c(\"MakeMiss\", \"Details\"), extra = 'merge')\n\nfreeThrows$Details <- sub('free throw', '', freeThrows$Details) %>% trimws()\nwhichFreeThrow <- str_locate(freeThrows$Details, '[0-9]')[,1]\nfreeThrows <- freeThrows %>% mutate(FreeThrowOrder = substr(Details,whichFreeThrow, 100)) %>% separate(FreeThrowOrder, into = c(\"Number\", \"OutOf\"), sep = \" of \")\nfreeThrows$Details[freeThrows$Details != 'technical'] <- \"Regular\"\nfreeThrows$Details[freeThrows$Details == 'technical'] <- \"Technical\"\n\nfreeThrows <- freeThrows %>% select(-Action) %>% mutate(HomeOrAway = recode(freeThrows$HomeOrAway, 'vs' = \"H\", '@' = \"A\")) %>% filter(HomeOrAway == \"H\")\n\n#freeThrows <- separate(freeThrows, Numbers, c(\"Number\", \"OutOf\"), sep= 'of') %>%\n # mutate(HomeOrAway = recode(freeThrows$HomeOrAway, 'vs' = \"H\", '@' = \"A\"), Type = recode(Type, 'free throw' = 'Regular', 'technical free throw' = \"Technical\"), \n  #       Number = as.numeric(Number), OutOf = as.numeric(OutOf))\n\nfreeThrows$Previous <- NA\nnotFirstFreeThrowOrTech <- which(freeThrows$Number %in% c(2,3))\nfreeThrows$Previous[notFirstFreeThrowOrTech] <- freeThrows$MakeMiss[notFirstFreeThrowOrTech-1]\nfreeThrows$Previous[is.na(freeThrows$Previous)] <- ''\n\nwrite.csv(freeThrows, 'freeThrows.csv')\n############################## Does making/missing first free throw affect player making the second?  ############################## \n\n### Group freeThrows tibbles to get counts for each make/miss combination ###\naggregated <- freeThrows %>% group_by(Player, MakeMiss, Previous) %>% summarise(total.count = n()) %>% ungroup(aggregated) %>% complete(Player, MakeMiss, Previous)\naggregated$Previous[which(aggregated$Previous == '')] <- NA\n\n### Pivot grouped tibble ###\nsecondFTonly <- aggregated %>% unite(New, MakeMiss, Previous, sep = \"_\") %>% spread(key = New, value = total.count) %>% separate(Player, into=c(\"FirstName\", \"LastName\"), sep=\" \")\nsecondFTonly <- secondFTonly[complete.cases(secondFTonly),] %>% mutate(MakeAfterMake = makes_makes/(makes_makes+makes_misses), \n                                                                      MakeAfterMiss = misses_makes/(misses_misses+misses_makes), \n                                                                      Makes = (makes_makes + makes_NA + makes_misses),\n                                                                      Misses = (misses_misses + misses_NA + misses_makes),\n                                                                      Total = (makes_makes + makes_misses + misses_misses + misses_makes + makes_NA + misses_NA),\n                                                                      Percentage = Makes/Total,\n                                                                      MissMotivation = MakeAfterMiss-MakeAfterMake)\n\n\n### Top 25 Tibbles for ggploting ###\nsecondFTonly25Total <- top_n(secondFTonly, 25, Total)\nsecondFTonly25Percentage <- top_n(secondFTonly, 25, Percentage)\nsecondFTonly25PercentageLow <- top_n(secondFTonly, -25, Percentage)\n\ng <- ggplot(data=secondFTonly, aes(MakeAfterMake, MakeAfterMiss)) + \n              geom_point(aes(MakeAfterMake, MakeAfterMiss, colour = MissMotivation, size=Total) , alpha = 0.2) + \n              geom_abline(slope=1, linetype = \"dotted\") + \n              theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = \"black\"))\n\ng1 <- g + geom_point(data = secondFTonly25Total, aes(colour = MissMotivation, size=Total))  + \n  geom_text(data= secondFTonly25Total, aes(label=LastName), vjust = 2) + \n  scale_colour_gradient(low = 'slategray1', high = 'slategray')\n\ng2 <- g + geom_point(data = secondFTonly25Percentage, aes(colour = MissMotivation, size=Total))  + \n  geom_text(data= secondFTonly25Percentage, aes(label=LastName), vjust = 2) + \n  scale_colour_gradient(low = 'darkseagreen1', high = 'darkseagreen4')\n\ng3 <- g + geom_point(data = secondFTonly25PercentageLow, aes(colour = MissMotivation, size=Total))  + \n  geom_text(data= secondFTonly25PercentageLow, aes(label=LastName), vjust = 2) + \n  scale_colour_gradient(low = 'mistyrose1', high = 'mistyrose4')\n\nmultiplot(g1,g2,g3, cols =2)\n\n\nmultiplot <- function(..., plotlist=NULL, cols) {\n  require(grid)\n  \n  # Make a list from the ... arguments and plotlist\n  plots <- c(list(...), plotlist)\n  \n  numPlots = length(plots)\n  \n  # Make the panel\n  plotCols = cols                          # Number of columns of plots\n  plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols\n  \n  # Set up the page\n  grid.newpage()\n  pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))\n  vplayout <- function(x, y)\n    viewport(layout.pos.row = x, layout.pos.col = y)\n  \n  # Make each plot, in the correct location\n  for (i in 1:numPlots) {\n    curRow = ceiling(i/plotCols)\n    curCol = (i-1) %% plotCols + 1\n    print(plots[[i]], vp = vplayout(curRow, curCol ))\n  }\n  \n}\n\n\n\n############################## Do players make more free throws in the clutch? ############################## \nfreeThrows2 <- filter(freeThrows, HomeOrAway == 'H') %>% mutate(QuarterNumber = as.double(str_extract(Quarter, \"\\\\d\")),\n                                                                MinutesIntoGame = as.integer(floor(TimeElapsed + 12*(QuarterNumber)-1)),\n                                                                NthThirdMinute = TimeElapsed %/% 3 + 1,\n                                                                PointDifferential = abs(HomeScore-AwayScore))\n\n## Get Reference Tables to filter certain players ##\nbyPlayer <- freeThrows2 %>%  group_by(Player, MinutesIntoGame, MakeMiss) %>% summarise(total.count = n()) %>% ungroup(byPlayer) %>% complete(Player, MinutesIntoGame, MakeMiss) %>% spread(key = MakeMiss, value = total.count)\nreference <- byPlayer %>% group_by(Player) %>% summarise(SeasonMakes = sum(makes, na.rm=TRUE), SeasonMisses = sum(misses, na.rm=TRUE)) %>% mutate(SeasonTotal = SeasonMakes + SeasonMisses, Percentage = SeasonMakes/SeasonTotal)\n\n## Get top 5 and bottom 5 players (min 125 FT's made) ##\ntop5Players <- top_n(filter(reference, SeasonMakes >= 125), 5, Percentage)$Player\nbottom5Players <- top_n(filter(reference, SeasonMakes >= 125), -5, Percentage)$Player\n\nallPlayers <- freeThrows2 %>% group_by(QuarterNumber) %>% summarise(Makes = sum(MakeMiss == \"makes\"), Misses = sum(MakeMiss == \"misses\"))\nallPlayers <- mutate(allPlayers, Percentage = Makes/(Makes+Misses)) \n\ntop5 <- filter(freeThrows2, Player %in% top5Players) %>% group_by(Player, QuarterNumber) %>% summarise(Makes = sum(MakeMiss == \"makes\"), Misses = sum(MakeMiss == \"misses\"))\ntop5 <- mutate(top5, Percentage = Makes/(Makes+Misses)) %>% ungroup(top5) %>%\n        #add dummy rows for legend workaround\n        add_row(Player = \" \", QuarterNumber = 1, Makes = 0, Misses = 0, Percentage = 0 ) %>% \n        add_row(Player = \"  \", QuarterNumber = 1, Makes = 0, Misses = 0, Percentage = 0 ) %>% \n        add_row(Player = \"   \", QuarterNumber = 1, Makes = 0, Misses = 0, Percentage = 0 ) %>% \n        add_row(Player = \"    \", QuarterNumber = 1, Makes = 0, Misses = 0, Percentage = 0 ) %>% \n        add_row(Player = \"     \", QuarterNumber = 1, Makes = 0, Misses = 0, Percentage = 0 ) %>% \n        add_row(Player = \"      \", QuarterNumber = 1, Makes = 0, Misses = 0, Percentage = 0 ) %>%\n        add_row(Player = \"       \", QuarterNumber = 1, Makes = 0, Misses = 0, Percentage = 0 ) %>%\n        add_row(Player = \"        \", QuarterNumber = 1, Makes = 0, Misses = 0, Percentage = 0 ) \n\nbottom5 <- filter(freeThrows2, Player %in% bottom5Players) %>% group_by(Player, QuarterNumber) %>% summarise(Makes = sum(MakeMiss == \"makes\"), Misses = sum(MakeMiss == \"misses\"))\nbottom5 <- mutate(bottom5, Percentage = Makes/(Makes+Misses)) \n\nall <- freeThrows2 %>% group_by(QuarterNumber) %>% summarise(Makes = sum(MakeMiss == \"makes\"), Misses = sum(MakeMiss == \"misses\"))\nall <- mutate(all, Percentage = Makes/(Makes+Misses)) \n\nlegendvalues <- c(\"Paul George\" = \"blue4\", \"Stephen Curry\" = \"dodgerblue2\", \"Kyrie Irving\" = \"cyan2\", \"Isaiah Thomas\" = \"paleturquoise2\", \"Danilo Gallinari\" = \"lightcyan1\",\n                  \" \" = \"white\", \"  \" = \"white\", \"   \" = \"white\", \"    \" = \"white\", \"     \" = \"white\", \"      \" = \"white\", \"       \" = \"white\", \"        \" = \"white\",\n                  \"Mason Plumlee\" = \"mistyrose1\", \"Dwight Howard\" = \"lightpink1\", \"Bismack Biyombo\" = \"indianred1\", \"DeAndre Jordan\" = \"red1\", \"Andre Drummond\" = \"red4\")\nnames <- c(\"Paul George\", \"Stephen Curry\", \"Kyrie Irving\", \"Isaiah Thomas\", \"Danilo Gallinari\",\n           \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \",\n           \"Mason Plumlee\",\"Dwight Howard\", \"Bismack Biyombo\", \"DeAndre Jordan\", \"Andre Drummond\")\n\n\nggByQuarter <- ggplot(data=top5, aes(QuarterNumber, Percentage)) +\n  geom_line(aes(colour = Player), size=.75) + geom_line(data = bottom5, aes(QuarterNumber, Percentage, colour = Player), size=.75) +\n  geom_line(data = all, aes(QuarterNumber, Percentage), size = .75, linetype = 2) + geom_text(data = all[all$QuarterNumber == 4,], aes(label = 'NBA Average'), hjust = 1, vjust = -1) +\n  ggtitle(\"Top/Bottom 5 Free Throw Percentages By Quarter (min. 125 makes)\\n\") + labs(x = '\\nQuarter', y = 'FT Percentage\\n\\n') +\n  scale_y_continuous(expand = c(0, 0), limits = c(0,1), breaks=seq(0,1,.05)) + \n  scale_color_manual(values=legendvalues, breaks = names) +  \n  theme(panel.grid.major = element_line(color = \"grey90\"), plot.title=element_text(size = 14, face = \"bold.italic\", hjust = 0.5), axis.title=element_text(size = 12, face = 'italic'), \n        axis.line = element_line(colour = \"black\"), legend.text=element_text(size = 11), legend.justification = \"top\") + \n  theme(legend.title=element_blank(), legend.key = element_blank(),  panel.background = element_blank())\n\nggByQuarter\n\n\n\nclutch <- filter(freeThrows2, MinutesIntoGame > 43, PointDifferential <= 6) %>% group_by(Player) %>% summarise(ClutchMakes = sum(MakeMiss == \"makes\"), ClutchMisses = sum(MakeMiss == \"misses\")) %>%\n          mutate(ClutchTotal = ClutchMakes + ClutchMisses, PercentageClutch = ClutchMakes/ClutchTotal) %>% \n          inner_join(reference, by = \"Player\") %>% mutate(PercentageDifference = PercentageClutch - Percentage) %>% \n          filter(ClutchTotal >= 50) %>% \n          mutate(rankClutch = dense_rank(desc(PercentageClutch)), rankSeason = dense_rank(desc(Percentage)), rankDifference = rankClutch-rankSeason) %>% \n          arrange(desc(PercentageClutch)) \n\nclutchRanking <- clutch %>%\n                 select(Player, rankSeason, rankClutch) %>% melt() %>% inner_join(clutch, by = \"Player\")\n\np <- ggplot(clutchRanking, aes(variable, value, group = Player, colour = rankDifference, label = Player))\np1 <- p + geom_line(size = .8) + \n      geom_text(data = subset(clutchRanking, variable == \"rankClutch\"), aes(x = variable, size = 1, hjust = 0)) +\n      geom_text(data = subset(clutchRanking, variable == \"rankSeason\"), aes(x = variable, size = 1, hjust = 1)) +\n      scale_colour_gradient(low=\"firebrick1\", high=\"forestgreen\") +\n      theme(legend.position = \"none\",  panel.background = element_blank()) + scale_y_continuous(trans = \"reverse\", breaks = seq(1,17,1))\n\nclutchRanking2 <- clutch %>% melt()\nclutchRanking2 <- ddply(clutchRanking2, .(variable), transform, rescale = rescale(value))\np <- ggplot(clutchRanking2, aes(variable, Player)) + geom_tile(aes(fill = rescale), colour = \"white\") + scale_fill_gradient(low = \"white\", high = \"steelblue\") +\n     scale_x_discrete(position = \"top\") + theme(legend.position = \"none\", panel.background = element_blank(), \n                                                axis.title = element_blank(), axis.ticks = element_blank(), axis.text.x = element_text(angle = 40, hjust = 0))\np\n\n\n###################### K - Mean's Clustering ###############################\nset.seed(20)\nCluster <- kmeans(select(secondFTonly, Percentage, MakeAfterMiss), 3, nstart=20)\n\ntesting <- secondFTonly\ntesting$Cluster <- as.factor(Cluster$cluster)\n\nggplot(data=testing, aes(Percentage, MakeAfterMiss)) + \n  geom_point(aes(colour = Cluster, size=Total)) + \n  geom_abline(slope=1, linetype = \"dotted\") + \n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = \"black\"))\n\n\n\n\n\n\n\n\n",
    "created" : 1505536577990.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "239935264",
    "id" : "6594E5F3",
    "lastKnownWriteTime" : 1500960465,
    "path" : "~/Code/NBA/cleanedPlayByPlayAnalysis.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}